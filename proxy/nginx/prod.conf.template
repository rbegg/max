# Defines a group of servers that NGINX can proxy requests to.
# This makes the configuration cleaner and easier to manage.
upstream backend_service {
    # The 'stt' service, running on its internal port.
    server ${UPSTREAM_HOST}:${UPSTREAM_PORT};
}

# --- HTTP to HTTPS Redirect ---
# This server block catches all HTTP traffic on port 80 and permanently
# redirects it to the corresponding HTTPS URL.
server {
    listen 80;
    # Listens for requests for your specific domain name.
    server_name ${SERVER_NAME};

    # Returns a 301 Permanent Redirect to the browser.
    return 301 https://$server_name$request_uri;
}

# --- Main HTTPS Server ---
# This block handles all secure traffic for your application.
server {
    listen 443 ssl http2;
    server_name ${SERVER_NAME};

    # --- SSL Certificate Configuration ---
    # These paths are standard for certificates obtained via Let's Encrypt/Certbot.
    ssl_certificate /etc/letsencrypt/live/${SERVER_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_NAME}/privkey.pem;

    # --- SSL/TLS Hardening ---
    # Enforces modern, secure protocols and ciphers.
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers off;

    # --- Security Headers ---
    # Tells browsers to only connect via HTTPS for the next 2 years.
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    # Prevents clickjacking attacks.
    add_header X-Frame-Options "SAMEORIGIN" always;
    # Prevents MIME-type sniffing security vulnerabilities.
    add_header X-Content-Type-Options "nosniff" always;

    # --- Performance: Gzip Compression ---
    # Compresses common text-based assets to reduce bandwidth.
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # --- Application Routing ---
    # Location for WebSocket connections (e.g., /ws)
    location /ws {
        proxy_pass http://backend_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # Location for all other standard HTTP requests
    location / {
        proxy_pass http://backend_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}